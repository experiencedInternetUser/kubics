class ReactionGame {
    field int x; field int y; 
    field int playerWidth; field int playerHeight;
    field int dx; field int dy;

    // препятствия
    field int bx1; field int by1; 
    field int bWidth1; field int bHeight1;
    field int dbx1; field int dby1;

    field int bx2; field int by2; 
    field int bWidth2; field int bHeight2;
    field int dbx2; field int dby2;

    field int bx3; field int by3; 
    field int bWidth3; field int bHeight3;
    field int dbx3; field int dby3;

    field int bx4; field int by4; 
    field int bWidth4; field int bHeight4;
    field int dbx4; field int dby4;

    // игровые штуки
    field boolean gameOver;
    field int gameSpeed;
    field int kindaTimeInMs; field int time;
    field int xBound; field int yBound;
    field int boundWidth; field int boundHeight;


    constructor ReactionGame new() {
        let x = 50; let y = 50;
        let playerWidth = 15; let playerHeight = 15;
        let dx = 0; let dy = 0;

        /////////////////////////

        //верхний левый 
        let bx1 = 30; let by1 = 30;
        let bWidth1 = 10; let bHeight1 = 20;
        let dbx1 = 1; let dby1 = -1;

        //нижний правый
        let bx2 = 100; let by2 = 100;
        let bWidth2 = 40; let bHeight2 = 10;
        let dbx2 = -1; let dby2 = -2;

        //верхний правый
        let bx3 = 100; let by3 = 30;
        let bWidth3 = 30; let bHeight3 = 20;
        let dbx3 = 1; let dby3 = 1;
        
        //нижний левый
        let bx4 = 30; let by4 = 100;
        let bWidth4 = 10; let bHeight4 = 30;
        let dbx4 = 2; let dby4 = 2;
        /////////////////////////

        let gameOver = false;
        let gameSpeed = 1;
        let xBound = 10; let yBound = 10;
        let boundWidth = 200; let boundHeight = 200;
        let kindaTimeInMs = 0; let time = 0;
        return this;
    }

    /** столкновения */
    method boolean collide(int bx, int by, int width, int height) {
        if ((x + playerWidth) < bx) { return false; }
        if ((bx + width) < x) { return false; }
        if ((y + playerHeight) < by) { return false; }
        if ((by + height) < y) { return false; }
        
        return true;
    }

    /** обновление моделей  */
    method void update() {
        let x = x + dx; let y = y + dy;

        if (x < xBound) { let x = xBound; }
        if (y < yBound) { let y = yBound; }

        if ((x + playerWidth) > (xBound + boundWidth)) { 
            let x = xBound + boundWidth - playerWidth; 
        }
        if ((y + playerHeight) > (yBound + boundHeight)) { 
            let y = yBound + boundHeight - playerHeight; 
        }

        //////////

        if ((bx1 + dbx1 < 0) | (bx1 + dbx1 > (xBound + boundWidth + xBound))) { let dbx1 = -dbx1; } 
        if ((by1 + dby1 < 0) | (by1 + dby1 > (yBound + boundHeight + yBound))) { let dby1 = -dby1; }
        let bx1 = bx1 + dbx1; let by1 = by1 + dby1;

        if ((bx2 + dbx2 < 0) | (bx2 + dbx2 > (xBound + boundWidth + xBound))) { let dbx2 = -dbx2; } 
        if ((by2 + dby2 < 0) | (by2 + dby2 > (yBound + boundHeight + yBound))) { let dby2 = -dby2; }
        let bx2 = bx2 + dbx2; let by2 = by2 + dby2;

        if ((bx3 + dbx3 < 0) | (bx3 + dbx3 > (xBound + boundWidth + xBound))) { let dbx3 = -dbx3; } 
        if ((by3 + dby3 < 0) | (by3 + dby3 > (yBound + boundHeight + yBound))) { let dby3 = -dby3; }
        let bx3 = bx3 + dbx3; let by3 = by3 + dby3;

        if ((bx4 + dbx4 < 0) | (bx4 + dbx4 > (xBound + boundWidth + xBound))) { let dbx4 = -dbx4; } 
        if ((by4 + dby4 < 0) | (by4 + dby4 > (yBound + boundHeight + yBound))) { let dby4 = -dby4; }
        let bx4 = bx4 + dbx4; let by4 = by4 + dby4;

        //////////

        if (collide(bx1, by1, bWidth1, bHeight1)) { let gameOver = true; }
        if (collide(bx2, by2, bWidth2, bHeight2)) { let gameOver = true; }
        if (collide(bx3, by3, bWidth3, bHeight3)) { let gameOver = true; }
        if (collide(bx4, by4, bWidth4, bHeight4)) { let gameOver = true; }
        
        //////////

        //do updateSpeed
        return;
    }

    /** Рисование всех объектов */
    method void drawAll() {
        do Screen.setColor(true);

        do Screen.drawLine(xBound, yBound, xBound + boundWidth, yBound + 0);
        do Screen.drawLine(xBound, yBound, xBound + 0, yBound + boundHeight);
        do Screen.drawLine(xBound + boundWidth, yBound + 0, xBound + boundWidth, yBound + boundHeight);
        do Screen.drawLine(xBound + 0, yBound + boundHeight, xBound + boundWidth, yBound  + boundHeight);
        
        //do Output.moveCursor(20, 0);
	    //do Output.printString("time:");
        do Output.moveCursor(20, 10);
        do Output.printInt(time);

        //////////

        do Screen.drawRectangle(bx1, by1, bx1 + bWidth1, by1 + bHeight1);
        do Screen.drawRectangle(bx2, by2, bx2 + bWidth2, by2 + bHeight2);
        do Screen.drawRectangle(bx3, by3, bx3 + bWidth3, by3 + bHeight3);
        do Screen.drawRectangle(bx4, by4, bx4 + bWidth4, by4 + bHeight4);

        ///////////

        do Screen.drawRectangle(x, y, x + playerWidth, y + playerHeight);

        return;
    }

    /** Попытка сделать время */
    method void increaseTime() {
        if (kindaTimeInMs = 50) {
            let kindaTimeInMs = 0;
            let time = time + 1;
        }
        return;
    }

    /** отрисовка game over */
    method void drawGameOver(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, -30946);
        do Memory.poke(memAddress +32, -14207);
        do Memory.poke(memAddress +64, 20381);
        do Memory.poke(memAddress +96, 18577);
        do Memory.poke(memAddress +128, 18574);
        do Memory.poke(memAddress +224, 18176);
        do Memory.poke(memAddress +256, 18560);
        do Memory.poke(memAddress +288, 18560);
        do Memory.poke(memAddress +320, 18560);
        do Memory.poke(memAddress +352, -30976);
        // column 1
        do Memory.poke(memAddress +1, 962);
        do Memory.poke(memAddress +33, 39);
        do Memory.poke(memAddress +65, 485);
        do Memory.poke(memAddress +97, 37);
        do Memory.poke(memAddress +129, 965);
        do Memory.poke(memAddress +225, -11324);
        do Memory.poke(memAddress +257, 12324);
        do Memory.poke(memAddress +289, 4580);
        do Memory.poke(memAddress +321, 4132);
        do Memory.poke(memAddress +353, 5059);
        // column 2
        do Memory.poke(memAddress +226, 1);
        return;
    }
    
    /** отрисовка pause */
    method void drawPause(int location) {
        var int memAddress; 
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 18190);
        do Memory.poke(memAddress +32, 18577);
        do Memory.poke(memAddress +64, 20367);
        do Memory.poke(memAddress +96, 18561);
        do Memory.poke(memAddress +128, -14207);
        // column 1
        do Memory.poke(memAddress +1, -7228);
        do Memory.poke(memAddress +33, 4132);
        do Memory.poke(memAddress +65, -3644);
        do Memory.poke(memAddress +97, 4612);
        do Memory.poke(memAddress +129, -7705);
        // column 2
        do Memory.poke(memAddress +2, 1);
        do Memory.poke(memAddress +130, 1);
        return;
    }

    /** ожидание рестарта + сам рестарт */
    method void waitRestart() {
        var int key;
        while (~(key = 114)) {
            let key = Keyboard.keyPressed();
            if (key = 114) { // r - restart
                let x = 50; let y = 50;
                let playerWidth = 15; let playerHeight = 15;
                let dx = 0; let dy = 0;

                /////////////////////////

                let bx1 = 30; let by1 = 30;
                let bWidth1 = 10; let bHeight1 = 20;
                let dbx1 = 1; let dby1 = -1;

                let bx2 = 100; let by2 = 100;
                let bWidth2 = 15; let bHeight2 = 10;
                let dbx2 = -1; let dby2 = -2;

                /////////////////////////

                let gameOver = false;
                let gameSpeed = 1;
                let xBound = 10; let yBound = 10;
                let boundWidth = 200; let boundHeight = 200;
                let kindaTimeInMs = 0; let time = 0;
            }
        }

        do run();
        return;
    }

    /** Запуск игры */
    method void run() {
        var int key;
        do Screen.clearScreen();
        do drawAll();

        while (~(gameOver)) {
            let dx = 0; let dy = 0;
            let key = Keyboard.keyPressed();
            let kindaTimeInMs = kindaTimeInMs + 1;
            do increaseTime();

            if (key = 97) { // a
                let dx = -5 * gameSpeed;
                let dy = 0;
            }
            if (key = 100) { // d
                let dx = 5 * gameSpeed;
                let dy = 0;
            }
            if (key = 119) { // w
                let dx = 0;
                let dy = -5 * gameSpeed;
            }
            if (key = 115) { // s
                let dx = 0;
                let dy = 5 * gameSpeed;
            }
            //q e z c


            if (key = 111) { // 0 - out(vixod)
                let gameOver = true;
            }
            if (key = 112) { // p - pause
                let key = 0; 
                do Sys.wait(50);
                while (~(key = 112)) {      
                    let key = Keyboard.keyPressed();
                    do drawPause(7000);
                }
            }

            do update(); 
            do Screen.clearScreen(); 
            do drawAll(); 
            do Sys.wait(1);
        }

        do drawGameOver(7000);
        do waitRestart();
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}
